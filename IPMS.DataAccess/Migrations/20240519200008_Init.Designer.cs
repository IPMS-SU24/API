// <auto-generated />
using System;
using IPMS.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IPMS.DataAccess.Migrations
{
    [DbContext(typeof(IPMSDbContext))]
    [Migration("20240519200008_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IPMS.DataAccess.Models.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Assessment", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ClassTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.HasIndex("TopicId");

                    b.ToTable("ClassTopic", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Committee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Committee", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ComponentsMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MasterType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TopicId");

                    b.ToTable("ComponentsMaster", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IoTComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IPMSUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IPMSUserId");

                    b.ToTable("IoTComponent", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IPMSClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangeGroupDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ChangeTopicDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateGroupDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("IPMSClass", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IPMSUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.LecturerGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("LecturerGrade", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.MemberHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjectFromApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProjectToApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberSwapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectFromComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectToComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReporterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MemberHistory", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ProjectSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FinalGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubmissionModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubmissionModuleId");

                    b.ToTable("ProjectSubmission", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SyllabusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ContributePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("InformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("InformationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.SubmissionModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("LectureId");

                    b.HasIndex("SemesterId");

                    b.ToTable("SubmissionModule", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Syllabus", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.TopicFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FavoriteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicFavorite", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Assessment", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Syllabus", "Syllabus")
                        .WithMany("Assessments")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ClassTopic", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSClass", "Class")
                        .WithMany("Topics")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.Project", "Project")
                        .WithOne("Topic")
                        .HasForeignKey("IPMS.DataAccess.Models.ClassTopic", "ProjectId");

                    b.HasOne("IPMS.DataAccess.Models.Topic", "Topic")
                        .WithMany("Classes")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");

                    b.Navigation("Project");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Committee", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSClass", "Class")
                        .WithMany("Committees")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Lecturer")
                        .WithMany("Committees")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ComponentsMaster", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IoTComponent", "Component")
                        .WithMany("ComponentsMasters")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.Project", null)
                        .WithMany("Components")
                        .HasForeignKey("ProjectId");

                    b.HasOne("IPMS.DataAccess.Models.Topic", null)
                        .WithMany("Components")
                        .HasForeignKey("TopicId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Favorite", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Lecturer")
                        .WithMany("Favorites")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IoTComponent", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", null)
                        .WithMany("IoTComponents")
                        .HasForeignKey("IPMSUserId");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IPMSClass", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Semester", "Semester")
                        .WithMany("Classes")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.LecturerGrade", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Committee", "Committee")
                        .WithMany("Grades")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.ProjectSubmission", "Submission")
                        .WithMany("Grades")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Committee");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Project", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Owner")
                        .WithMany("OwnProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ProjectSubmission", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Project", "Project")
                        .WithMany("Submissions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.SubmissionModule", "SubmissionModule")
                        .WithMany("ProjectSubmissions")
                        .HasForeignKey("SubmissionModuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("SubmissionModule");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Report", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Semester", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Syllabus", "Syllabus")
                        .WithMany("Semesters")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Student", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSClass", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Information")
                        .WithMany("Students")
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.Project", "Project")
                        .WithMany("Students")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");

                    b.Navigation("Information");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.SubmissionModule", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Assessment", "Assessment")
                        .WithMany("Modules")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Lecturer")
                        .WithMany("Modules")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.Semester", "Semester")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Assessment");

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Topic", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", "Owner")
                        .WithMany("OwnTopics")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.TopicFavorite", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.Favorite", "Favorite")
                        .WithMany("Topics")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IPMS.DataAccess.Models.Topic", "Topic")
                        .WithMany("Favorites")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Favorite");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IPMS.DataAccess.Models.IPMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Assessment", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Committee", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Favorite", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IoTComponent", b =>
                {
                    b.Navigation("ComponentsMasters");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IPMSClass", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Students");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.IPMSUser", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Favorites");

                    b.Navigation("IoTComponents");

                    b.Navigation("Modules");

                    b.Navigation("OwnProjects");

                    b.Navigation("OwnTopics");

                    b.Navigation("Reports");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Project", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Students");

                    b.Navigation("Submissions");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.ProjectSubmission", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Semester", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.SubmissionModule", b =>
                {
                    b.Navigation("ProjectSubmissions");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Syllabus", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("IPMS.DataAccess.Models.Topic", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Components");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
